// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package colorapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ColorsClient is the client API for Colors service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ColorsClient interface {
	PickAllColors(ctx context.Context, in *StartIndex, opts ...grpc.CallOption) (Colors_PickAllColorsClient, error)
	AddColorFromHexOrRgb(ctx context.Context, in *Color, opts ...grpc.CallOption) (*Reply, error)
}

type colorsClient struct {
	cc grpc.ClientConnInterface
}

func NewColorsClient(cc grpc.ClientConnInterface) ColorsClient {
	return &colorsClient{cc}
}

func (c *colorsClient) PickAllColors(ctx context.Context, in *StartIndex, opts ...grpc.CallOption) (Colors_PickAllColorsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Colors_ServiceDesc.Streams[0], "/colorapi.Colors/PickAllColors", opts...)
	if err != nil {
		return nil, err
	}
	x := &colorsPickAllColorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Colors_PickAllColorsClient interface {
	Recv() (*ColorResponse, error)
	grpc.ClientStream
}

type colorsPickAllColorsClient struct {
	grpc.ClientStream
}

func (x *colorsPickAllColorsClient) Recv() (*ColorResponse, error) {
	m := new(ColorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *colorsClient) AddColorFromHexOrRgb(ctx context.Context, in *Color, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/colorapi.Colors/AddColorFromHexOrRgb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ColorsServer is the server API for Colors service.
// All implementations must embed UnimplementedColorsServer
// for forward compatibility
type ColorsServer interface {
	PickAllColors(*StartIndex, Colors_PickAllColorsServer) error
	AddColorFromHexOrRgb(context.Context, *Color) (*Reply, error)
	mustEmbedUnimplementedColorsServer()
}

// UnimplementedColorsServer must be embedded to have forward compatible implementations.
type UnimplementedColorsServer struct {
}

func (UnimplementedColorsServer) PickAllColors(*StartIndex, Colors_PickAllColorsServer) error {
	return status.Errorf(codes.Unimplemented, "method PickAllColors not implemented")
}
func (UnimplementedColorsServer) AddColorFromHexOrRgb(context.Context, *Color) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddColorFromHexOrRgb not implemented")
}
func (UnimplementedColorsServer) mustEmbedUnimplementedColorsServer() {}

// UnsafeColorsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ColorsServer will
// result in compilation errors.
type UnsafeColorsServer interface {
	mustEmbedUnimplementedColorsServer()
}

func RegisterColorsServer(s grpc.ServiceRegistrar, srv ColorsServer) {
	s.RegisterService(&Colors_ServiceDesc, srv)
}

func _Colors_PickAllColors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartIndex)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ColorsServer).PickAllColors(m, &colorsPickAllColorsServer{stream})
}

type Colors_PickAllColorsServer interface {
	Send(*ColorResponse) error
	grpc.ServerStream
}

type colorsPickAllColorsServer struct {
	grpc.ServerStream
}

func (x *colorsPickAllColorsServer) Send(m *ColorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Colors_AddColorFromHexOrRgb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Color)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColorsServer).AddColorFromHexOrRgb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colorapi.Colors/AddColorFromHexOrRgb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColorsServer).AddColorFromHexOrRgb(ctx, req.(*Color))
	}
	return interceptor(ctx, in, info, handler)
}

// Colors_ServiceDesc is the grpc.ServiceDesc for Colors service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Colors_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "colorapi.Colors",
	HandlerType: (*ColorsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddColorFromHexOrRgb",
			Handler:    _Colors_AddColorFromHexOrRgb_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PickAllColors",
			Handler:       _Colors_PickAllColors_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "colorapi/service.proto",
}
